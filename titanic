
import pandas as pd
import numpy as np
from pandas import Series,DataFrame
from sklearn.ensemble import RandomForestRegressor
from sklearn import linear_model
from sklearn import model_selection
import sklearn.preprocessing as preprocessing
pd.set_option('display.height',1000)
pd.set_option('display.max_rows',500)
pd.set_option('display.max_columns',500)
pd.set_option('display.width',1000)

data_train = pd.read_csv("H:\Titanic\Titanic_train.csv")
#print(data_train.describe())

#print(data_train.Pclass.value_counts()) # 查看离散型变量的统计信息

def set_Cabin_type(df):
    df.loc[ (df.Cabin.notnull()), 'Cabin' ] = "Yes"
    df.loc[ (df.Cabin.isnull()), 'Cabin' ] = "No"
    return df

# 使用 RandomForestClassifier 填补缺失的年龄属性
def set_missing_ages(df):
    # 把已有的数值型特征取出来丢进Random Forest Regressor中
    age_df = df[['Age','Fare', 'Parch', 'SibSp', 'Pclass']]
    know_age = age_df[age_df.Age.notnull()].values
    unknow_age = age_df[age_df.Age.isnull()].values
    y = know_age[:,0]
    x = know_age[:,1:]
    rfr = RandomForestRegressor(random_state=0, n_estimators=2000, n_jobs=-1)
    rfr.fit(x,y)
    predictedAges = rfr.predict(unknow_age[:, 1:])
    df.loc[ (df.Age.isnull()), 'Age' ] = predictedAges
    return df,rfr

def get_feature_dummies(df):
    set_Cabin_type(df)
    dummies_Cabin = pd.get_dummies(df['Cabin'], prefix= 'Cabin')
    dummies_Embarked = pd.get_dummies(df['Embarked'], prefix= 'Embarked')
    dummies_Sex = pd.get_dummies(df['Sex'], prefix= 'Sex')
    dummies_Pclass = pd.get_dummies(df['Pclass'], prefix= 'Pclass')
    df = pd.concat([data_train, dummies_Cabin, dummies_Embarked, dummies_Sex, dummies_Pclass], axis=1)
    df.drop(['PassengerId','Pclass', 'Name', 'Sex', 'Ticket', 'Cabin', 'Embarked'], axis=1, inplace=True)
    return df

def get_feature_standard(df):
    scaler = preprocessing.StandardScaler()
    scaler.fit(df[['Age','Fare']])
    age_fare_df = pd.DataFrame(scaler.transform(df[['Age','Fare']]), columns=['Age_scaled','Fare_scaled'])
    df = pd.concat([df, age_fare_df], axis=1)
    return df,scaler

tmp_train_df,rfr = set_missing_ages(data_train)
train_df_dummies,scaler = get_feature_standard(get_feature_dummies(tmp_train_df))
train_df_dummies.drop(['Age','Fare'], axis=1, inplace=True)
print(train_df_dummies.head())

train_np = train_df_dummies.values
# 训练模型
# y即Survival结果
y = train_np[:, 0]
# X即特征属性值
X = train_np[:, 1:]

clf = linear_model.LogisticRegression(C=1.0, penalty='l1', tol=1e-6)
#clf.fit(X, y)
from sklearn.svm import SVC
clf = SVC(kernel='rbf')
scores = model_selection.cross_val_score(clf, X, y, cv=5)
print(scores.mean())

"""
# 读取测试数据
data_test = pd.read_csv("H:\Titanic\Titanic_test.csv")
data_test.loc[ (data_test.Fare.isnull()), 'Fare' ] = 0

tmp_df = data_test[['Age','Fare', 'Parch', 'SibSp', 'Pclass']]
null_age = tmp_df[tmp_df.Age.isnull()].values
X = null_age[:, 1:]
predictedAges = rfr.predict(X)
data_test.loc[ (data_test.Age.isnull()), 'Age' ] = predictedAges
age_fare_testdf = pd.DataFrame(scaler.transform(data_test[['Age','Fare']]), columns=['Age_scaled','Fare_scaled'])

set_Cabin_type(data_test)
dummies_Cabin = pd.get_dummies(data_test['Cabin'], prefix= 'Cabin')
dummies_Embarked = pd.get_dummies(data_test['Embarked'], prefix= 'Embarked')
dummies_Sex = pd.get_dummies(data_test['Sex'], prefix= 'Sex')
dummies_Pclass = pd.get_dummies(data_test['Pclass'], prefix= 'Pclass')
test_df_dummies = pd.concat([data_test, dummies_Cabin, dummies_Embarked, dummies_Sex, dummies_Pclass], axis=1)
test_df_dummies.drop(['PassengerId','Pclass', 'Name', 'Sex', 'Ticket', 'Cabin', 'Embarked','Age','Fare'], axis=1, inplace=True)
test_df_dummies = pd.concat([test_df_dummies, age_fare_testdf], axis=1)

print(test_df_dummies.head())

predictions = clf.predict(test_df_dummies)

result = pd.DataFrame({'PassengerId':data_test['PassengerId'].as_matrix(), 'Survived':predictions.astype(np.int32)})
print(result)
"""
